description: The following analytic detects when a process attempts to execute a file
  from within an NTFS file system alternate data stream. This detection leverages
  process execution data from sources like Windows process monitoring or Sysmon Event
  ID 1, focusing on specific processes known for such behavior. This activity is significant
  because alternate data streams can be used by threat actors to hide malicious code,
  making it difficult to detect. If confirmed malicious, this could allow an attacker
  to execute hidden code, potentially leading to unauthorized actions and further
  compromise of the system.
required_fields:
- _time
- Processes.dest
- Processes.user
- Processes.parent_process_name
- Processes.process_name
- Processes.process
- Processes.process_id
- Processes.parent_process_id
rule: '| tstats count min(_time) as firstTime max(_time) as lastTime values(Processes.process_current_directory)
  as directory from datamodel=Endpoint.Processes where Processes.parent_process_name
  != "unknown" Processes.process_name IN ("appvlp.exe","bitsadmin.exe","control.exe","cscript.exe","forfiles.exe","ftp.exe","mavinject.exe","mshta.exe","powershell.exe","powershell_ise.exe","pwsh.exe","regini.exe","regscr32.exe","rundll32.exe","sc.exe","wmic.exe","wscript.exe")
  by Processes.dest Processes.user Processes.parent_process_name Processes.process_name
  Processes.process Processes.process_id Processes.parent_process_id | `drop_dm_object_name(Processes)`
  | regex process="(\b)\w+(\.\w+)?:\w+(\.\w{2,4})(?!\.)(\b|\s|&)" | convert timeformat="%Y-%m-%dT%H:%M:%S"
  ctime($field$) | convert timeformat="%Y-%m-%dT%H:%M:%S" ctime($field$) | `windows_alternate_datastream___process_execution_filter`'
