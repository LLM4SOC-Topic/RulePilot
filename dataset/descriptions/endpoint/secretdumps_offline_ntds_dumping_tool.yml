description: The following analytic detects the potential use of the secretsdump.py
  tool to dump NTLM hashes from a copy of ntds.dit and the SAM, SYSTEM, and SECURITY
  registry hives. It leverages data from Endpoint Detection and Response (EDR) agents,
  focusing on specific command-line patterns and process names associated with secretsdump.py.
  This activity is significant because it indicates an attempt to extract sensitive
  credential information offline, which is a common post-exploitation technique. If
  confirmed malicious, this could allow an attacker to obtain NTLM hashes, facilitating
  further lateral movement and potential privilege escalation within the network.
required_fields:
- _time
- Processes.process_name
- Processes.process
- Processes.parent_process_name
- Processes.parent_process
- Processes.dest
- Processes.user
- Processes.process_id
- Processes.process_guid
rule: '| tstats summariesonly=`summariesonly_config` allow_old_summaries=`oldsummaries_config`
  fillnull_value=`fillnull_config` count min(_time) as firstTime max(_time) as lastTime
  from datamodel=Endpoint.Processes where Processes.process_name = "python*.exe" Processes.process
  = "*.py*" Processes.process = "*-ntds*" (Processes.process = "*-system*" OR Processes.process
  = "*-sam*" OR Processes.process = "*-security*" OR Processes.process = "*-bootkey*")
  by Processes.process_name Processes.process Processes.parent_process_name Processes.parent_process
  Processes.dest Processes.user Processes.process_id Processes.process_guid | `drop_dm_object_name(Processes)`
  | convert timeformat="%Y-%m-%dT%H:%M:%S" ctime($field$) | convert timeformat="%Y-%m-%dT%H:%M:%S"
  ctime($field$) | `secretdumps_offline_ntds_dumping_tool_filter`'
