description: This analytic employs the 3-sigma approach to detect an unusual volume
  of failed authentication attempts from a single source. A password spray attack
  is a type of brute force attack where an attacker tries a few common passwords across
  many different accounts to avoid detection and account lockouts. By utilizing the
  Authentication Data Model, this detection is effective for all CIM-mapped authentication
  events, providing comprehensive coverage and enhancing security against these attacks.
required_fields:
- Authentication.action
- Authentication.user
- Authentication.src
rule: "| tstats summariesonly=`summariesonly_config` allow_old_summaries=`oldsummaries_config`\
  \ fillnull_value=`fillnull_config` values(Authentication.user) AS unique_user_names\
  \ dc(Authentication.user) AS unique_accounts values(Authentication.app) as app count(Authentication.user)\
  \ as total_failures from datamodel=Authentication.Authentication where Authentication.action=\"\
  failure\" NOT Authentication.src IN (\"-\",\"unknown\") by Authentication.src, Authentication.action,\
  \ Authentication.signature_id, sourcetype, _time span=5m  | `drop_dm_object_name(\"\
  Authentication\")`\n    ```fill out time buckets for 0-count events during entire\
  \ search length```\n| appendpipe [| timechart limit=0 span=5m count | table _time]\
  \ | fillnull value=0 unique_accounts\n  ``` Create aggregation field & apply to\
  \ all null events```\n| eval counter=src+\"__\"+sourcetype+\"__\"+signature_id \
  \ | eventstats values(counter) as fnscounter  | eval counter=coalesce(counter,fnscounter)\
  \ \n  ``` stats version of mvexpand ```\n| stats values(app) as app values(unique_user_names)\
  \ as unique_user_names values(total_failures) as total_failures values(src) as src\
  \ values(signature_id) as signature_id values(sourcetype) as sourcetype count by\
  \ counter unique_accounts _time\n    ``` remove duplicate time buckets for each\
  \ unique source```\n| sort - _time unique_accounts | dedup _time counter\n    ```Find\
  \ the outliers```\n| eventstats avg(unique_accounts) as comp_avg , stdev(unique_accounts)\
  \ as comp_std by counter | eval upperBound=(comp_avg+comp_std*3) | eval isOutlier=if(unique_accounts\
  \ > 30 and unique_accounts >= upperBound, 1, 0) | replace \"::ffff:*\" with * in\
  \ src  | where isOutlier=1  | foreach * \n    [ eval <<FIELD>> = if(<<FIELD>>=\"\
  null\",null(),<<FIELD>>)] \n| table _time, src, action, app, unique_accounts, unique_user_names,\
  \ total_failures, sourcetype, signature_id, counter | `detect_password_spray_attempts_filter`"
